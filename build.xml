<?xml version="1.0" encoding="UTF-8"?>
<project name="TicTacToe" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>Builds the TicTacToe command line application and its associated tests.</description>

    <!-- Source and build directory defaults -->
    <property name="src.dir" value="src"/>
    <property name="resources.dir" value="resources"/>

    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jar"/>

    <property name="main-class" value="com.cmendenhall.Main"/>

    <mkdir dir="lib" />
    <property name="lib.dir" value="lib"/>
    <property name="test.dir" value="test" />

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <path id="classpath.test">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <pathelement location="${classes.dir}" />
        <pathelement location="${resources.dir}" />
    </path>

    <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>

    <!-- Automatically download Ivy -->
    <property name="ivy.jar.dir" value="${user.home}/.ant/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="check-ivy" unless="INTERN-ivy.jar.exists" description="Check if the Ivy .jar is already installed.">
        <echo message="Checking for Ivy .jar in local directories." />
        <available property="INTERN-ivy.jar.exists" file="${ivy.jar.file}"/>
    </target>

    <target name="bootstrap-ivy"
            description="Installs the Ivy jar before downloading dependencies."
            unless="INTERN-ivy.jar.exists"
            depends="check-ivy">
        <echo message="Bootstrapping Ivy installation." />
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar"
             src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
    </target>

    <target name="resolve" description="Retrieve dependencies with Ivy." depends="check-ivy, bootstrap-ivy">
        <echo message="Resolving project dependencies." />
        <ivy:retrieve />
    </target>

    <target name="clean" description="Cleans up automatically generated files and directories.">
        <echo message="Cleaning up build directory." />
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile" depends="resolve" description="Compiles project.">
        <echo message="Compiling project." />
        <mkdir dir="${classes.dir}"/>
        <javac includeantruntime="false" debug="true" srcdir="${src.dir}" destdir="${classes.dir}" >
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="compile-tests" depends="resolve" description="Compiles JUnit tests." >
        <echo message="Compiling JUnit tests." />
        <javac includeantruntime="false" debug="true" srcdir="${test.dir}" destdir="${classes.dir}" >
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="jar" depends="compile" description="Packages project as .jar file.">
        <echo message="Packaging project as .jar file." />
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar">
            <manifest>
                <attribute name="Main-class" value="${main-class}"/>
            </manifest>
            <fileset dir="${classes.dir}">
                <include name="**/*.class" />
            </fileset>
            <fileset dir="${resources.dir}">
                <include name="**/*.properties" />
            </fileset>
        </jar>
    </target>

    <property name="junitpath" refid="classpath.test" />


    <target name="test" depends="compile, compile-tests" description="Runs JUnit tests.">
        <echo message="Running JUnit tests." />
        <junit printsummary="on" haltonfailure="yes" failureproperty="test.failure">
            <jvmarg value="-Dfile.encoding=UTF-8:-XX:-UseSplitVerifier" />
            <formatter type="brief" usefile="false" />
            <classpath>
                <path refid="classpath.test"/>
            </classpath>

            <batchtest fork="on">
                <fileset id="matchedtests" dir="${classes.dir}">
                    <include name="**/*Test.class"/>
                    <exclude name="**/TicTacToeTest.class" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="clean-build" depends="clean, jar" description="Cleans output directory and builds .jar.">
        <echo message="Cleaning build directory and rebuilding .jar." />
    </target>

    <target name="build-all" depends="clean, jar, test" description="Cleans output directory, retrieves dependencies, builds and packages project and tests.">
        <echo message="Finishing build." />
    </target>

</project>